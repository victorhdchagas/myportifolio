---
import { db, Projects as ProjectsTable } from 'astro:db'
import Navbar from '../../components/organisms/Navbar.astro'
import Card from '../../components/atoms/Card.astro'
import { Icon } from 'astro-icon/components'

function getTechIconName(tech: string): string {
  const icons: Record<string, string> = {
    React: 'mdi:react',
    TypeScript: 'mdi:language-typescript',
    JavaScript: 'mdi:language-javascript',
    'Vue.js': 'mdi:vuejs',
    Angular: 'mdi:angular',
    'Node.js': 'mdi:nodejs',
    NestJS: 'mdi:nestjs',
    Python: 'mdi:language-python',
    Java: 'mdi:language-java',
    'C#': 'mdi:language-csharp',
    'VB.Net': 'mdi:dotnet',
    Delphi: 'mdi:code-braces',
    PostgreSQL: 'mdi:database',
    MySQL: 'mdi:database',
    'SQL Server': 'mdi:database',
    MongoDB: 'mdi:database',
    Docker: 'mdi:docker',
    Kubernetes: 'mdi:kubernetes',
    'GitHub Actions': 'mdi:github',
    'Nostr Protocol': 'mdi:web',
    Cryptography: 'mdi:shield-key',
    IndexedDB: 'mdi:database',
    PWA: 'mdi:cellphone',
    'Cordova/PhoneGap': 'mdi:cellphone',
    jQuery: 'mdi:jquery',
    'Nexcore API': 'mdi:api',
  }
  return icons[tech] || 'mdi:code-tags'
}

export async function getStaticPaths() {
  const projects = await db.select().from(ProjectsTable)

  return projects.map((project) => ({
    params: { id: project.title.toLowerCase().replace(/\s+/g, '-') },
    props: { project },
  }))
}

const { project } = Astro.props

// Generate metadata for SEO
const title = `${project.title} - Victor Hugo Portfolio`
const description = project.smallDescription
const slug = project.title.toLowerCase().replace(/\s+/g, '-')
const url = `https://victorhugo.dev/projects/${slug}`
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={project.tags.join(', ')} />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      :root {
        /* Light theme colors */
        --bg-primary: oklch(100% 0 0);
        --bg-secondary: oklch(96% 0.01 45);
        --bg-tertiary: oklch(92% 0.01 45);
        --text-primary: oklch(20% 0 0);
        --text-secondary: oklch(45% 0 0);
        --text-accent: oklch(65% 0.2 45);
        --border-color: oklch(92% 0.01 45);
        --shadow-color: oklch(0% 0 0 / 0.1);
      }

      [data-theme='dark'] {
        /* Dark theme colors */
        --bg-primary: oklch(8% 0 0);
        --bg-secondary: oklch(10% 0 0);
        --bg-tertiary: oklch(15% 0 0);
        --text-primary: oklch(85% 0 0);
        --text-secondary: oklch(70% 0 0);
        --text-accent: oklch(75% 0.2 45);
        --border-color: oklch(20% 0 0);
        --shadow-color: oklch(0% 0 0 / 0.6);
      }

      html {
        scroll-behavior: smooth;
      }

      * {
        box-sizing: border-box;
      }

      body {
        margin: 0;
        padding: 0;
        line-height: 1.6;
        background: var(--bg-primary);
        color: var(--text-primary);
        transition:
          background-color 0.3s ease,
          color 0.3s ease;
        font-family:
          'Inter',
          -apple-system,
          BlinkMacSystemFont,
          'Segoe UI',
          Roboto,
          sans-serif;
      }

      /* Theme transition for all elements */
      * {
        transition:
          color 0.3s ease,
          background-color 0.3s ease,
          border-color 0.3s ease,
          box-shadow 0.3s ease;
      }
    </style>
  </head>
  <body>
    <Navbar />
    <main>
      <section class="project-detail">
        <div class="container">
          <div class="project-header">
            <h1 class="project-title">{project.title}</h1>
            <div class="project-meta">
              <div class="project-tags">
                {
                  project.tags.map((tag: string) => (
                    <span class="tag">{tag}</span>
                  ))
                }
              </div>
              {
                project.link && (
                  <a
                    href={project.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="live-demo-btn"
                  >
                    Live Demo
                  </a>
                )
              }
            </div>
          </div>

          <div class="project-content">
            <div class="project-sidebar">
              <Card shadow="outset" class="project-info-card">
                <div class="project-info">
                  <div class="project-screenshot">
                    <img
                      src={project.images.length > 0
                        ? `/${project.title.toLowerCase().replace(/\s+/g, '-')}/${project.images[0]}`
                        : '/product_placeholder.jpg'}
                      alt={`${project.title} screenshot`}
                    />
                  </div>

                  <h2>{project.title}</h2>
                  <p class="project-summary">{project.smallDescription}</p>

                  <div class="project-tags">
                    {
                      project.tags.map((tag: string) => (
                        <span class="tag" key={tag}>
                          {tag}
                        </span>
                      ))
                    }
                  </div>

                  <div class="project-actions">
                    {
                      project.link && (
                        <a
                          href={project.link}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="live-demo-link"
                        >
                          Live Demo <span class="arrow">‚Üí</span>
                        </a>
                      )
                    }
                  </div>
                </div>
              </Card>

              <Card shadow="outset" class="tech-stack-card">
                <h3>Technology Stack</h3>
                <div class="tech-grid">
                  {
                    project.tags.map((tech: string) => {
                      const iconName = getTechIconName(tech)
                      return (
                        <div class="tech-item" key={tech}>
                          <Icon name={iconName} size={20} />
                          <span class="tech-name">{tech}</span>
                        </div>
                      )
                    })
                  }
                </div>
              </Card>
            </div>

            <div class="project-main">
              <Card shadow="outset" class="details-card">
                <h2>Detailed Description</h2>
                <div class="full-description">
                  {
                    project.fullDescription.map(
                      (paragraph: string, index: number) => (
                        <p key={index}>{paragraph}</p>
                      ),
                    )
                  }
                </div>
              </Card>
            </div>
          </div>

          <div class="project-navigation">
            <a href="/#projects" class="back-btn">‚Üê Back to Portfolio</a>
          </div>
        </div>
      </section>
    </main>

    <!-- Fixed Navigation Menu -->
    <div
      class="fixed bottom-4 right-4 gap-1 flex flex-col transition-all duration-500 opacity-100"
      id="navmenu"
    >
      <div class="flex flex-row gap-1">
        <a
          class="w-14 h-14 rounded-tl-2xl text-white bg-orange-600 hover:bg-orange-500 flex justify-center items-center transition-colors"
          href="#hero"
          title="Home">üè†</a
        >
        <a
          class="w-14 h-14 rounded-tr-2xl text-white bg-orange-600 hover:bg-orange-500 flex justify-center items-center transition-colors"
          href="#projects"
          title="Projects">üíº</a
        >
      </div>
      <div class="flex flex-row gap-1">
        <a
          class="w-14 h-14 rounded-bl-2xl text-white bg-orange-600 hover:bg-orange-500 flex justify-center items-center transition-colors"
          href="#about"
          title="About">üë§</a
        >
        <a
          class="w-14 h-14 rounded-br-2xl text-white bg-orange-600 hover:bg-orange-500 flex justify-center items-center transition-colors"
          href="#contact"
          title="Contact">üìß</a
        >
      </div>
    </div>
  </body>
</html>

<style>
  .project-detail {
    padding: 5rem 0;
    background: var(--bg-primary);
    min-height: 100vh;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .project-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .project-title {
    font-size: 3rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 2rem;
    line-height: 1.2;
  }

  .project-meta {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
  }

  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1.5rem 0;
  }

  .tag {
    background: var(--bg-tertiary);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
    border: 1px solid var(--border-color);
  }

  .project-actions {
    margin-top: 2rem;
  }

  .live-demo-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-accent);
    text-decoration: none;
    font-weight: 500;
    font-size: 0.9rem;
    transition: color 0.2s ease;
    padding: 0.5rem 0;
  }

  .live-demo-link:hover {
    color: oklch(55% 0.2 45);
  }

  .arrow {
    transition: transform 0.2s ease;
  }

  .live-demo-link:hover .arrow {
    transform: translateX(2px);
  }

  .project-screenshot {
    margin-bottom: 1.5rem;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid var(--border-color);
  }

  .project-screenshot img {
    width: 100%;
    height: auto;
    display: block;
    background-color: black;
  }

  .project-info h2 {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .project-info .project-summary {
    font-size: 0.9rem;
    line-height: 1.5;
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }

  .project-content {
    display: grid;
    grid-template-columns: 350px 1fr;
    gap: 2rem;
    margin-bottom: 4rem;
  }

  .project-sidebar {
    position: sticky;
    top: 2rem;
    height: fit-content;
  }

  .project-main {
    min-height: 600px;
  }

  .description-card h2,
  .details-card h2,
  .tech-stack-card h3 {
    font-size: 0.8rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .project-summary {
    font-size: 1.2rem;
    line-height: 1.6;
    color: var(--text-secondary);
    font-weight: 500;
  }

  .full-description {
    display: grid;
    gap: 1.5rem;
  }

  .full-description p {
    font-size: 1.1rem;
    line-height: 1.7;
    color: var(--text-secondary);
    margin: 0;
  }

  .tech-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .tech-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    border-radius: 8px;
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    transition: background-color 0.2s ease;
  }

  .tech-item:hover {
    background: var(--bg-secondary);
  }

  .tech-name {
    font-weight: 500;
    color: var(--text-secondary);
    font-size: 0.85rem;
  }

  .project-navigation {
    text-align: center;
  }

  .back-btn {
    display: inline-block;
    color: var(--text-accent);
    text-decoration: none;
    font-weight: 500;
    font-size: 1.1rem;
    padding: 1rem 2rem;
    border: 2px solid var(--text-accent);
    border-radius: 25px;
    transition: all 0.2s ease;
  }

  .back-btn:hover {
    background: var(--text-accent);
    color: white;
  }

  /* Fixed navigation menu styles */
  #navmenu {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    z-index: 1000;
  }

  #navmenu a {
    display: flex;
    justify-content: center;
    align-items: center;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  @media (max-width: 768px) {
    .project-content {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .project-sidebar {
      position: static;
    }

    .project-title {
      font-size: 2.5rem;
    }

    .project-meta {
      gap: 1.5rem;
    }

    .project-tags {
      justify-content: center;
    }

    .tech-grid {
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    }

    .full-description p {
      font-size: 1rem;
    }
  }
</style>
