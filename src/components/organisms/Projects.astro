---
// src/components/organisms/Projects.astro
import { db, Projects as ProjectsTable } from 'astro:db'
import { Image } from 'astro:assets'

export interface Project {
  id: string
  title: string
  description: string
  image?: string
  technologies: string[]
  githubUrl?: string
  liveUrl?: string
}

export interface Props {
  id?: string
  title?: string
}

const { id } = Astro.props

// Query projects from database
const dbProjects = await db.select().from(ProjectsTable)
const projects: Project[] = dbProjects.map((project: any) => ({
  id: project.id.toString(),
  title: project.title,
  description: project.smallDescription,
  technologies: project.tags as string[],
  githubUrl: project.link?.includes('github.com') ? project.link : undefined,
  liveUrl:
    project.link && !project.link.includes('github.com')
      ? project.link
      : undefined,
  image:
    project.images.length > 0
      ? `/${project.title.toLowerCase().replace(/\s+/g, '-')}/${project.images[0]}`
      : '/product_placeholder.jpg', // Use screenshot1.png as main image
}))

const title = 'My Projects'
---

<section class="projects" id={id}>
  <div class="container">
    <h2 class="section-title">{title}</h2>
    <div class="projects-grid">
      {
        projects.map((project) => (
          <div class="project-card">
            {project.image && (
              <img
                src={project.image}
                alt={project.title}
                class="project-image"
                loading="lazy"
                decoding="async"
              />
            )}
            <div class="project-content">
              <h3 class="project-title">{project.title}</h3>
              <p class="project-description">{project.description}</p>
              <div class="project-tech">
                {project.technologies.map((tech) => (
                  <span class="tech-tag">{tech}</span>
                ))}
              </div>
              <div class="project-links">
                <a
                  href={`/projects/${project.title.toLowerCase().replace(/\s+/g, '-')}`}
                  class="project-link primary"
                >
                  View Details
                </a>
                {project.githubUrl && (
                  <a
                    href={project.githubUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="project-link"
                  >
                    GitHub
                  </a>
                )}
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<style>
  .projects {
    padding: 5rem 0;
    background: var(--bg-secondary);
    scroll-margin-top: 70px;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  .section-title {
    font-size: 2.5rem;
    text-align: center;
    margin-bottom: 3rem;
    color: var(--text-primary);
  }

  .projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .project-card {
    background: var(--bg-primary);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px var(--shadow-color);
    display: flex;
    flex-direction: column;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px var(--shadow-color);
  }

  .project-image {
    width: 100%;
    height: 200px;
    object-fit: contain;
    background-color: black;
    transition: opacity 0.3s ease;
  }

  .project-image[loading='lazy']:not([data-loaded]):not(
      [src*='product_placeholder']
    ) {
    opacity: 0;
    filter: blur(10px);
    transform: scale(1.1);
  }

  .project-image[data-loaded] {
    opacity: 1;
    filter: none;
    transform: none;
  }

  .project-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex-grow: 1;
  }

  .project-title {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }

  .project-description {
    color: var(--text-secondary);
    margin-bottom: 1rem;
    line-height: 1.6;
    flex-grow: 3;
  }

  .project-tech {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }

  .tech-tag {
    color: var(--text-secondary);
    padding: 0.15rem 0.65rem;
    border-radius: 6px 0 2px 2px;
    font-size: 0.65rem;
    font-weight: 500;
    box-shadow: inset 0 3px 4px var(--shadow-color);
    border: 1px solid var(--border-color);
    text-transform: lowercase;
  }

  .project-links {
    display: flex;
    gap: 1rem;
  }

  .project-link {
    padding: 0.5rem 1rem;
    border: 2px solid oklch(65% 0.2 45);
    border-radius: 6px;
    text-decoration: none;
    color: oklch(65% 0.2 45);
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .project-link:hover {
    background: oklch(65% 0.2 45);
    color: white;
  }

  .project-link.primary {
    background: oklch(65% 0.2 45);
    color: white;
  }

  .project-link.primary:hover {
    background: oklch(55% 0.2 45);
  }

  @media (max-width: 768px) {
    .section-title {
      font-size: 2rem;
    }

    .projects-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Image loading optimization
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.project-image[loading="lazy"]')

    images.forEach((img) => {
      const image = img as HTMLImageElement

      // Skip loading effects for placeholder images
      if (image.src.includes('product_placeholder.jpg')) {
        image.setAttribute('data-loaded', 'true')
        return
      }

      // Preload critical images (first 2)
      if (Array.from(images).indexOf(image) < 3) {
        image.loading = 'eager'
      }

      // Handle image load
      image.addEventListener('load', () => {
        image.setAttribute('data-loaded', 'true')
      })

      // Handle image error
      image.addEventListener('error', () => {
        image.style.opacity = '0.5'
        image.src = '/product_placeholder.jpg'
        image.alt = 'Image failed to load'
        image.setAttribute('data-loaded', 'true')
      })
    })
  })
</script>
